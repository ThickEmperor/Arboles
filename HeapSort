/**
 *
 * @author luise
 */
public class Main {
    public static void main(String[] args) {
            
    int numeros[] = {6,5,46,13,135,16,46,8,1,5,4,64,};
    int n = numeros.length;
    
    HeapSort hp = new HeapSort();
    hp.sort(numeros);
    
    System.out.println("NÃºmeros Ordenados:");
    printArray(numeros);
    }
    static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
}
public class HeapSort {
    public void sort(int arr[])
    {
        int n = arr.length;
        for (int i = n / 2 - 1; i >= 0; i--){
            heapify(arr, n, i);
        }
        for (int i = n - 1; i > 0; i--) {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
            heapify(arr, i, 0);
        }
    }
    void heapify(int arr[], int n, int i)
    {
        int mayor = i;
        int l = 2 * i + 1; // left = 2*i + 1
        int r = 2 * i + 2; // right = 2*i + 2
 
        // If left child is larger than root
        if (l < n && arr[l] > arr[mayor])
            mayor = l;
 
        // If right child is larger than largest so far
        if (r < n && arr[r] > arr[mayor])
            mayor = r;
 
        // If largest is not root
        if (mayor != i) {
            int swap = arr[i];
            arr[i] = arr[mayor];
            arr[mayor] = swap;
 
            // Recursively heapify the affected sub-tree
            heapify(arr, n, mayor);
        }
    }
}
