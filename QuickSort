import java.util.Random;

/**
 *
 * @author luise
 */
public class Main {
    public static void main(String[] args)
    {
        QuickSort qs = new QuickSort();
        for(int i = 0; i < 1000001; ++i)
        {
            Random rng = new Random();
            int valorDado = rng.nextInt(100001); 
                qs.insertar(valorDado);
        }
        System.out.print("Números: ");
        qs.recorrer();
        System.out.println("\n");
        System.out.print("Números ordenados: ");
        qs.quickSort();
        qs.recorrer();
    }
}
public class Nodo {
    int dato;
    Nodo anterior;
    Nodo siguiente;
    
}
/**
 *
 * @author luise
 */
public class QuickSort {
    Nodo inicio = null;
    Nodo fin = null;
    
    public void recorrer()
    {
        Nodo aux = inicio;
        while(aux != null)
        {
            System.out.print(aux.dato + " ");
            aux = aux.siguiente;
        }
    }
    public boolean isEmpty()
    {
        return (inicio == null) && (fin == null);
    }
    
    public Nodo division(Nodo raiz, Nodo ultimo)
    {        
        Nodo i = raiz.anterior;
        Nodo j = raiz;
        int temp;
        while(j != ultimo)
        {
            if(j.dato <= ultimo.dato)
            {
                if(i == null)
                {
                    i = raiz;
                }else
                {
                    i = i.siguiente;
                }
                temp = i.dato;
                i.dato = j.dato;
                j.dato = temp;               
            }
            j = j.siguiente;
        }
        if(i == null)
        {
            i = raiz;
        }
        else
        {
            i = i.siguiente;
        }
        temp = i.dato;
        i.dato = ultimo.dato;
        ultimo.dato = temp;
        return i;
    }
    public void sort(Nodo alto, Nodo bajo)
    {
        if(bajo != null && alto != bajo && alto != bajo.siguiente)
        {
            Nodo temp = division(alto, bajo);
            sort(alto, temp.anterior);
            sort(temp.siguiente, bajo);
        }
    }
    
    public Nodo crearNodo(int dato)
    {
        Nodo nuevo = new Nodo();
        nuevo.anterior = null;
        nuevo.siguiente = null;
        nuevo.dato = dato;
        return nuevo;
    }
        
     public void insertar(int dato)
    {
        Nodo nuevo = crearNodo(dato);
        if(isEmpty())
        {
            inicio = nuevo;
            fin = nuevo;
        }
        else
        {
            nuevo.anterior = fin;
            fin.siguiente = nuevo;
            fin = nuevo;
        }
    }
    public void quickSort()
    {
        sort(inicio, fin);
    }
    public int tamanio(QuickSort a)
    {
        Nodo aux = a.inicio;
        int count = 1;
        while(aux != null)
        {
            aux = aux.siguiente;
            count++;
        }
        return count;
    }
   
    
}
