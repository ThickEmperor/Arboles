import java.util.Random;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author luise
 */
public class Main {
    public static void main(String args[]) 
    { 
       ShellSort lista = new ShellSort();
        for(int i = 0; i < 1000001; ++i){
            Random rand = new Random();
            int valorDado = rand.nextInt(100001); 
            lista.insertar(valorDado);
        }
        
        System.out.print("Números: ");
        lista.recorrer();
        System.out.println("\n");
        
        System.out.print("Números Ordenados: ");
        lista.shellSort();
        lista.recorrer();
    }
}
/**
 *
 * @author luise
 */
public class ShellSort {
    Nodo inicio = null;
    Nodo fin = null;
    
    public void insertar(int dato)
    {
        Nodo nuevo = crearNodo(dato);
        if(isEmpty())
        {
            inicio = nuevo;
            fin = nuevo;
        }
        else
        {
            nuevo.anterior = fin;
            fin.siguiente = nuevo;
            fin = nuevo;
        }
    }
    public void ordenar(int distancia)
    {
        if(distancia <= 0 )
        {
            return;
        }else{
            int brecha = distancia / 2;
            Nodo par1 = inicio;
            Nodo par2 = encontrarPar(par1, brecha);
            while(par2 != null)
            {
                if(par1.dato >= par2.dato)
                {
                    int temp = par1.dato;
                    par1.dato = par2.dato;
                    par2.dato = temp;
                }
                par1 = par1.siguiente;
                par2 = par2.siguiente;
            }
            ordenar(brecha);
        }
    }         
    public boolean isEmpty(){
        return (inicio == null) && (fin == null);
    }
    public void recorrer()
    {
        Nodo aux = inicio;
        while( aux != null )
        {
            System.out.print(aux.dato + " ");
            aux = aux.siguiente;
        }
    }
    
    public Nodo encontrarPar(Nodo raiz, int distancia)
    {        
        Nodo aux = raiz;
        for(int i = 0; i <= distancia; ++i)
        {
            aux = aux.siguiente;
        } 
        return aux;
    }
    public Nodo crearNodo(int dato)
    {
        Nodo nuevo = new Nodo();
        nuevo.anterior = null;
        nuevo.siguiente = null;
        nuevo.dato = dato;
        return nuevo;
    }
    
    public void shellSort(){
        int tamano = tamanio(inicio);
        ordenar(tamano);
    }
    
    public int tamanio(Nodo raiz){
        Nodo aux = raiz;
        int count = 0;
        while(aux != null){
            aux = aux.siguiente;
            count++;
        }
        return count;
    }

}
public class Nodo {
    int dato;
    Nodo siguiente;
    Nodo anterior;
    
}
